<?phpclass help{    //加载分组模型、类库    static function load($class, $path, $is_vendor = false){        if ($is_vendor) {            $path = trim($path, '/.... ') . '/';        } else {            $path = trim($path) ? $path . '/model/' : 'model/';        }        require_once PATH_ROOT . $path . $class . '.php';        return class_exists($class) ? $class : null;    }    //返回单个汉字的拼音    static function spell($chinese){        if (strlen(trim($chinese)) == 3) {            $fp = fopen(DATA_STORE . 'txt/spell.txt', "r");            $spell = array();            while (!feof($fp)) {                $line = trim(fgets($fp));                $data = explode("=", $line);                $spell[$data[0]] = $data[1];            }            fclose($fp);            return $spell[$chinese];        }    }    //获取IP    static function ip(){        if (isset($_SERVER)) {            if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) {                return $_SERVER["HTTP_X_FORWARDED_FOR"];            }            if (isset($_SERVER["HTTP_CLIENT_IP"])) {                return $_SERVER["HTTP_CLIENT_IP"];            }            return $_SERVER["REMOTE_ADDR"];        }        if (getenv("HTTP_X_FORWARDED_FOR")) {            return getenv("HTTP_X_FORWARDED_FOR");        }        if (getenv("HTTP_CLIENT_IP")) {            return getenv("HTTP_CLIENT_IP");        }        return getenv("REMOTE_ADDR");    }    //获取请求ip所在的省份和城市    static function address($ip = '', $url = ''){        $ip = $ip ? $ip : self::ip();        //http://ipquery.sdo.com/getipinfo.php?ip=        $url = $url ? $url : 'http://int.dpool.sina.com.cn/iplookup/iplookup.php?ip=';        $data = iconv('gbk', 'utf-8//IGNORE', file_get_contents($url . $ip));        preg_match_all('/[\x{4e00}-\x{9fa5}]+/u', $data, $address);        return $address[0];    }    //获取移动设备的类型    static function mobile(){        if (isset($_SERVER["HTTP_USER_AGENT"]) && $_SERVER["HTTP_USER_AGENT"]) {            $mobile_list = config('mobile.category', 'site');            $user_agent = strtolower($_SERVER["HTTP_USER_AGENT"]);            foreach ($mobile_list as $category) {                if (strpos($user_agent, $category) !== false) {                    return $category;                }            }        }    }    //检测银行卡    static function is_bank_card($card_no, $bank){        if (validate::check($card_no,'length','15,19')) {            $prefix_number = config($bank, 'bank');            foreach ($prefix_number as $value) {                if (strpos($card_no, $value) === 0) {                    return true;                }            }        }        return false;    }    //处理下载文件的文件名    static function download_name($file_name){        $file_name = str_replace(array('\\', '/', ':', '*', '?', '"', '<', '>', '|', ','), '', $file_name);        if (isset($_SERVER['HTTP_USER_AGENT']) && ($user_agent = $_SERVER['HTTP_USER_AGENT'])) {            if (preg_match('/MSIE/', $user_agent)) {                return 'filename="' . str_replace('+', '%20', urlencode($file_name)) . '"';            } elseif (preg_match('/Firefox/', $user_agent)) {                return 'filename*="utf8\'\'' . str_replace('+', '%20', urlencode($file_name)) . '"';            }        }        return 'filename="' . $file_name . '"';    }    //发送下载文件头信息    static function download_header($mime_type, $file_size, $file_name){        header('Content-Type: ' . $mime_type);        header('Content-Disposition: attachment; ' . $file_name);        header('Expires: 0');        header('Content-Transfer-Encoding: binary');        header('Content-Length: ' . $file_size);        header('Cache-Control: private, no-transform, no-store, must-revalidate');    }    //数组多选处理    static function array_sift($arrow, $target, $connector = ','){        $string = '';        $intersect = array_intersect($arrow, array_keys($target));        foreach ($intersect as $key) {            $string .= $target[$key] . $connector;        }        return trim($string, $connector);    }    //对象转成数组    static function object_array($data){        if (is_object($data)) {            $data = get_object_vars($data);            if (is_array($data)) {                $data = array_map('self::object_array', $data);            }            return $data;        }    }    //将数组或对象转换为xml（递归）    static function data_xml($data, $tag = 'item', $with_id = false){        $xml = '';        foreach ($data as $key => $value) {            $xml .= is_numeric($key) ? ($with_id ? "<$tag id=\"$key\">" : "<$tag>") : "<$key>";            $xml .= (is_array($value) || is_object($value)) ? self::data_xml($value) : $value;            $xml .= is_numeric($key) ? "</$tag>" : "</$key>";        }        return $xml;    }    //数组变ini配置数据    static function array_ini($data){        $string = '';        if ($data && is_array($data)) {            foreach ($data as $name => $option) {                if ($option && is_array($option)) {                    $string .= PHP_EOL . "[$name]" . PHP_EOL;                    foreach ($option as $key => $value) {                        $string .= $key . '=' . $value . PHP_EOL;                    }                }            }        }        return trim($string, PHP_EOL);    }}