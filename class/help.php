<?phpclass help{    //批量(数组)定义常量    static function batch_define($data,$is_lower=true){        if (is_array($data)) foreach ($data as $key=>$value) {            $key=$is_lower ? strtolower($key) : strtoupper($key);            if (in_array(gettype($value),array('string','integer','double','boolean')))                if (!defined($key)) define($key,$value);        }    }    //加载分组模型、类库    static function load($class,$group,$is_library=false){        if ($is_library) {            $group=trim($group,'/.... ').'/';        } else {            $group=trim($group) ? $group.'/model/' : 'model/';        }        require_once PATH_ROOT.$group.$class.'.php';        return class_exists($class) ? $class : null;    }    //多语言解析    static function lang($info,$language=''){        if (is_array($language)) {            return array_get($language,$info);        }        if (empty($language)) {            $language=session::get('language');            empty($language) and $language='cn';        }        $group='';        $file='common';        $back=$info;        if (strpos($info,':')) {            list($front,$back)=explode(':',$info);            $file=$front;            strpos($front,'.') and list($group,$file)=explode('.',$front);        }        $group and $group=$group.'/';        $data=include(DATA_LANG.$language.'/'.$group.$file.'.php');        return array_get($data,$back);    }    //返回单个汉字的拼音    static function spell($chinese){        if (strlen(trim($chinese)) == 3) {            $fp=fopen(DATA_STORE.'txt/spell.txt',"r");            $spell=array();            while (!feof($fp)) {                $line=trim(fgets($fp));                $data=explode("=",$line);                $spell[$data[0]]=$data[1];            }            fclose($fp);            return $spell[$chinese];        }    }    //获取IP    static function ip(){        if (isset($_SERVER)) {            if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) return $_SERVER["HTTP_X_FORWARDED_FOR"];            if (isset($_SERVER["HTTP_CLIENT_IP"])) return $_SERVER["HTTP_CLIENT_IP"];            return $_SERVER["REMOTE_ADDR"];        }        if (getenv("HTTP_X_FORWARDED_FOR")) return getenv("HTTP_X_FORWARDED_FOR");        if (getenv("HTTP_CLIENT_IP")) return getenv("HTTP_CLIENT_IP");        return getenv("REMOTE_ADDR");    }    //获取请求ip所在的省份和城市    static function address($ip='',$url=''){        $ip=$ip ? $ip : self::ip();        // http://ipquery.sdo.com/getipinfo.php?ip=        $url=$url ? $url : 'http://int.dpool.sina.com.cn/iplookup/iplookup.php?ip=';        $data=iconv('gbk','utf-8//IGNORE',file_get_contents($url.$ip));        preg_match_all('/[\x{4e00}-\x{9fa5}]+/u',$data,$address);        return $address[0];    }    //获取二维码（net-google）    static function qrcode($info,$w_h='120',$level='L',$margin='0'){        $info=trim($info);        $info=regexp::match($info,'url') ? urlencode($info) : $info;        $url='http://chart.apis.google.com/chart?';        $param='chs='.$w_h.'x'.$w_h.'&cht=qr&chld='.$level.'|'.$margin.'&chl='.$info;        return '<img src='.$url.$param.'>';    }    //数组多选处理    static function array_sift($target,$compare,$connector=','){        $data=array();        if ($target) foreach ($target as $value) {            isset($compare[$value]) and $data[]=$compare[$value];        }        return $data ? implode($connector,$data) : '';    }    //将数组或对象转换为xml（递归）    static function data_xml($data,$tag='item',$mode=false){        $xml='';        foreach ($data as $key=>$value) {            $xml.=is_numeric($key) ? ($mode ? "<$tag id=\"$key\">" : "<$tag>") : "<$key>";            $xml.=(is_array($value) || is_object($value)) ? self::data_xml($value) : $value;            $xml.=is_numeric($key) ? "</$tag>" : "</$key>";        }        return $xml;    }    //数组变ini配置数据    static function array_ini($data){        $string='';        if ($data && is_array($data)) {            foreach ($data as $name=>$info) {                if ($info && is_array($info)) {                    $string.=PHP_EOL."[$name]".PHP_EOL;                    foreach ($info as $key=>$value) {                        $string.=$key.'='.$value.PHP_EOL;                    }                }            }        }        return trim($string,PHP_EOL);    }    //对象转成数组    static function object_array($data){        is_object($data) and $data=get_object_vars($data);        return is_array($data) ? array_map('self::object_array',$data) : $data;    }    //获取移动设备的类型    static function mobile(){        if (isset($_SERVER["HTTP_USER_AGENT"]) && $_SERVER["HTTP_USER_AGENT"]) {            $mobile_list=array('iphone','android','ipad','ipod','micromessenger');            $user_agent=strtolower($_SERVER["HTTP_USER_AGENT"]);            foreach ($mobile_list as $category)                if (strpos($user_agent,$category) !== false) return $category;        }    }    //检测银行卡    static function is_bank_card($bank,$card_no){        $prefix_number=config($bank,'bank');        foreach ($prefix_number as $value) {            if (strpos($card_no,$value) === 0) {                return true;            }        }        return false;    }    //处理下载文件的文件名    static function process_download_file_name($file_name){        $file_name=str_replace(array('\\','/',':','*','?','"','<','>','|',','),'',$file_name);        if (isset($_SERVER['HTTP_USER_AGENT']) && ($user_agent=$_SERVER['HTTP_USER_AGENT'])) {            if (preg_match('/MSIE/',$user_agent)) {                return 'filename="'.str_replace('+','%20',urlencode($file_name)).'"';            } elseif (preg_match('/Firefox/',$user_agent)) {                return 'filename*="utf8\'\''.str_replace('+','%20',urlencode($file_name)).'"';            }        }        return 'filename="'.$file_name.'"';    }}